name: kong
version: "1.0.3"
summary: The Cloud-Native API Gateway
base: core18
description: |
  Kong is a cloud-native, fast, scalable, and distributed Microservice Abstraction Layer (also known as an API Gateway, API Middleware or in some cases Service Mesh). Made available as an open-source project in 2015, its core values are high performance and extensibility.
icon: snap/local/runtime-assets/kong-logo.png

grade: stable
confinement: strict

layout:
  /etc/luarocks:
    bind: $SNAP_DATA/etc/luarocks

architectures: 
  - build-on: armhf
  - build-on: arm64
  - build-on: amd64
  - build-on: i386

apps:
  kong-daemon:
    adapter: full
    after:
      - cassandra
    command: bin/kong-daemon.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/kong.conf
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    start-timeout: 15m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  kong:
    adapter: full
    command: bin/kong-wrapper.sh
    plugs:
      - network-bind
      - network
      - home
      - removable-media
  cassandra:
    command: bin/cassandra-wrapper.sh
    daemon: forking
    adapter: full
    # mount-observe needs to be manually connected post-install:
    # `sudo snap connect cassandra:mount-observe ubuntu-core:mount-observe`
    plugs:
      - network
      - network-bind
      # Needed for checking available space in the data directories
      # (java.io.File.getTotalSpace).
      - mount-observe

parts:
  scripts:
    source: .
    plugin: dump
    prime:
      - bin/*
  
  openresty:
    plugin: autotools
    source: https://openresty.org/download/openresty-1.13.6.2.tar.gz
    install-via: prefix
    # configure options here from https://getkong.org/install/source/
    configflags:
      - --with-pcre-jit
      - --with-ipv6
      - --with-http_realip_module
      - --with-http_ssl_module
      - --with-http_stub_status_module
      - --with-http_v2_module
    build-packages:
      - build-essential
      - libpcre3-dev
      - perl
      - curl
      - libssl1.0-dev
      - zlib1g-dev
    stage-packages:
      - perl
    override-build: |
      snapcraftctl build
      # openresty will make an absolute symbolic link of openresty to the 
      # nginx binary, so we need to delete that and replace it with a relative
      # symlink
      cd $SNAPCRAFT_PART_INSTALL/bin
      rm -rf openresty
      ln -s ../nginx/sbin/nginx openresty
      ln -s ../nginx/sbin/nginx nginx
      # the openresty build system also hard-codes the path to nginx inside
      # the "resty" binary so we need to change that
      sed -i \
        -e s@$SNAPCRAFT_PART_INSTALL/nginx/sbin/nginx@/snap/kong/current/nginx/sbin/nginx@ \
        resty

  kong:
    source: https://github.com/kong/kong.git
    plugin: nil
    source-tag: 1.0.3
    source-depth: 1
    build-packages:
      - unzip
      - libssl1.0-dev
      - libpcre3-dev
      - libyaml-dev
      - luarocks
      - lua5.1
    stage-packages:
      - perl
      - luarocks
      - lua5.1
      - libyaml-dev
    override-build: |
      # first copy the default config file provided and install it into $SNAPCRAFT_PART_INSTALL/config
      mkdir -p $SNAPCRAFT_PART_INSTALL/config
      cp kong.conf.default $SNAPCRAFT_PART_INSTALL/config/kong.conf

      # handle the location of openssl + libcrypto by architecture
      # cause luarocks is silly and hardcodes /usr/lib/x86_64-linux-gnu as the lib search path
      ARCH=$(uname -m)
      case $ARCH in
      aarch64*)
        luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
          CRYPTO_LIBDIR=/usr/lib/aarch64-linux-gnu \
          CRYPTO_INCDIR=/usr/include \
          OPENSSL_LIBDIR=/usr/lib/aarch64-linux-gnu \
          OPENSSL_INCDIR=/usr/include
        ;;
      arm*)
        luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
          CRYPTO_LIBDIR=/usr/lib/arm-linux-gnueabihf \
          CRYPTO_INCDIR=/usr/include \
          OPENSSL_LIBDIR=/usr/lib/arm-linux-gnueabihf \
          OPENSSL_INCDIR=/usr/include
        ;;
      i386|i686)
        luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
          CRYPTO_LIBDIR=/usr/lib/i386-linux-gnu \
          CRYPTO_INCDIR=/usr/include \
          OPENSSL_LIBDIR=/usr/lib/i386-linux-gnu \
          OPENSSL_INCDIR=/usr/include
        ;;
      x86_64)
        # x64 is the only arch that luarocks can properly find libs for :-/
        luarocks make --tree=$SNAPCRAFT_PART_INSTALL
        ;;
      *)
        echo "Unsupported arch $ARCH"
        exit 1
        ;;
      esac

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp bin/kong $SNAPCRAFT_PART_INSTALL/bin/kong
      # make all the things inside the cmd directory executable because they for some reason aren't executable by default...
      cd $SNAPCRAFT_PART_INSTALL/share/lua/5.1/kong/cmd
      for cmd in $(ls *.lua); do
        chmod +x $cmd
      done

      # TODO: the json2lua script references $SNAPCRAFT_PART_INSTALL in some 
      # paths it tries to load things from, probably worth fixing that to use
      # $SNAP, etc. but currently json2lua seems unused so not changing it now
  cassandra:
    plugin: dump
    source: http://apache.claz.org/cassandra/3.11.4/apache-cassandra-3.11.4-bin.tar.gz
    source-type: tar
    build-packages:
      - ant-optional
      - build-essential
      - python
      - sed
    stage-packages:
      # Copy some packages into the stage directory to steal their
      # pre-built binaries.
      - mawk
      - grep
      # For free(1)
      - procps
      - openjdk-8-jdk
    organize:
      # Rename directories into their expected locations. Analogous to
      # Debian's .install files.
      conf: etc/cassandra
      bin/cassandra: usr/sbin/cassandra
      lib: usr/share/cassandra/lib
      # Rename mawk to awk instead of shipping a symlink.
      usr/bin/mawk: usr/bin/awk
    override-prime: |
      snapcraftctl prime
      # since we only use cassandra for kong, we severly limit the amount of 
      # RAM that cassandra uses since it's a big of a RAM hog, by default
      # attempting to use half of your RAM for itself...
      echo "-Xms64M" >> $SNAPCRAFT_PART_INSTALL/etc/cassandra/jvm.options
      echo "-Xmx256M" >> $SNAPCRAFT_PART_INSTALL/etc/cassandra/jvm.options
      echo "-Xmn64M" >> $SNAPCRAFT_PART_INSTALL/etc/cassandra/jvm.options
    prime:
      # Files from the stage directory to include in the snap.
      - bin/nodetool
      - etc/cassandra
      - usr/sbin/cassandra
      - usr/share/cassandra/lib/*.jar
      - usr/lib/jvm
      # awk, grep, and free are needed by cassandra-env.sh
      - usr/bin/awk
      - bin/grep
      - usr/bin/free
