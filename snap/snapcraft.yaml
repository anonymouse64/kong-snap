name: kong
version: "2.0.4"
summary: The Cloud-Native API Gateway
base: core18
description: |
  Kong is a cloud-native, fast, scalable, and distributed Microservice Abstraction Layer (also known as an API Gateway, API Middleware or in some cases Service Mesh). Made available as an open-source project in 2015, its core values are high performance and extensibility.
icon: snap/local/runtime-assets/kong-logo.png

# for system-usernames we need snapd 2.42
assumes: [snapd2.42]

# epoch 0 is for the old 0.13.1 version of the snap with cassandra
# epoch 1 is for the 1.3 version of the snap with both cassandra and postgres
# epoch 2 is for 1.3+ version of the snap with just postgres
epoch: 2

grade: stable
confinement: strict

layout:
  /etc/luarocks:
    bind: $SNAP_DATA/etc/luarocks

system-usernames:
  snap_daemon: shared

environment:
  LC_ALL: C.UTF-8
  LANG: C.UTF-8

passthrough:
  hooks:
    post-refresh:
      environment:
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload
    install:
      environment:
        PGHOST: $SNAP_COMMON/sockets
        SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
      command-chain:
        - snap/command-chain/snapcraft-runner
        - bin/snapcraft-preload

architectures:
  - build-on: armhf
  - build-on: arm64
  - build-on: amd64
  - build-on: i386

apps:
  kong-daemon:
    adapter: full
    after:
      - postgres
    command: bin/kong-daemon.sh
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    daemon: forking
    environment:
      KONG_CONF: $SNAP_DATA/config/kong.conf
      KONG_LOGS_DIR: $SNAP_COMMON/logs
      KONG_PROXY_ACCESS_LOG: $SNAP_COMMON/logs/kong-proxy-access.log
      KONG_ADMIN_ACCESS_LOG: $SNAP_COMMON/logs/kong-admin-access.log
      KONG_PROXY_ERROR_LOG: $SNAP_COMMON/logs/kong-proxy-error.log
      KONG_ADMIN_ERROR_LOG: $SNAP_COMMON/logs/kong-admin-error.log
      KONG_ADMIN_LISTEN: "0.0.0.0:8001, 0.0.0.0:8444 ssl"
    start-timeout: 1m
    plugs:
      - network
      - network-bind
    stop-command: bin/kong-stop.sh
  kong:
    adapter: full
    command: bin/kong
    command-chain:
      - bin/perl5lib-launch.sh
      - bin/kong-launch.sh
    environment:
      KONG_LOGS_DIR: $SNAP_COMMON/logs
    plugs:
      - network-bind
      - network
      - home
      - removable-media
  postgres:
    adapter: full
    command: usr/lib/postgresql/10/bin/postgres -D $SNAP_DATA/postgresql/10/main -c $CONFIG_ARG
    daemon: simple
    environment:
      CONFIG_ARG: config_file=$SNAP_DATA/etc/postgresql/10/main/postgresql.conf
      SNAPCRAFT_PRELOAD_REDIRECT_ONLY_SHM: 1
    command-chain:
      - bin/gosu-snap_daemon.sh
      - bin/snapcraft-preload
    plugs:
      - network
      - network-bind
  psql:
    adapter: full
    command: usr/bin/psql
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network
  # same as psql app, but runs as any user, not snap_daemon
  psql-any:
    adapter: full
    command: usr/bin/psql
    environment:
      PGHOST: $SNAP_COMMON/sockets
      PSQLRC: $SNAP_USER_COMMON/.psqlrc
    command-chain:
      - bin/perl5lib-launch.sh
    plugs:
      - network
  createuser:
    adapter: full
    command: usr/bin/createuser
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createuser should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network
  createdb:
    adapter: full
    command: usr/bin/createdb
    environment:
      PGHOST: $SNAP_COMMON/sockets
    command-chain:
      - bin/perl5lib-launch.sh
      # createdb should be run as the snap_daemon user, which is the user
      # who is initially created as a role with postgres
      - bin/gosu-snap_daemon.sh
    plugs:
      - network

parts:
  scripts:
    source: .
    plugin: dump
    prime:
      - bin/*
      - etc/*
  openresty-kong-patches:
    plugin: dump
    # this used to be in https://github.com/Kong/openresty-patches but was
    # moved recently to live in-tree with the build-tools
    source: nil
    source-type: local
    override-pull:
      # we have to manually git clone this because the repo is stupid and has a
      # non-public submodule, which we cannot clone, and snapcraft always uses
      # --recursive when cloning which will prompt for authentication
      # see https://bugs.launchpad.net/snapcraft/+bug/1640675
      # so we manually clone it without --recursive
      git clone https://github.com/Kong/kong-build-tools.git $SNAPCRAFT_PART_SRC
    organize:
      openresty-patches/patches: openresty-kong-patches
    stage: [openresty-kong-patches]
    prime: [-*]
  lua-kong-nginx-module:
    source: https://github.com/Kong/lua-kong-nginx-module.git
    # TODO: is this the right tag for this? it's just the newest, so ???
    source-tag: 0.0.6
    plugin: nil
    override-build: |
      # install the static lualib dir into the final snap, the compiled parts
      # will be installed into the snap as part of the OpenResty part build
      mkdir -p $SNAPCRAFT_PART_INSTALL/lualib/resty/kong
      cp -r $SNAPCRAFT_PART_SRC/lualib/resty/kong/tls.lua $SNAPCRAFT_PART_INSTALL/lualib/resty/kong/tls.lua

      # copy the necessary soruce files from here into a module specific dir in
      # $SNAPCRAFT_STAGE because some of these files such as config conflict 
      # with files that Kong generates/needs, so we want these to be in their
      # own dir for OpenResty to compile with
      mkdir -p $SNAPCRAFT_STAGE/lua-kong-nginx-module
      for f in lualib src config Makefile; do
        cp -r "$SNAPCRAFT_PART_SRC/$f" "$SNAPCRAFT_STAGE/lua-kong-nginx-module/$f"
      done
      mkdir -p $SNAPCRAFT_PART_INSTALL/usr/share/lua-kong-nginx-module
      cp LICENSE $SNAPCRAFT_PART_INSTALL/usr/share/lua-kong-nginx-module/LICENSE

  openresty:
    # see comment on kong's after spec for why we order after snapcraft-preload
    # here
    after: [openresty-kong-patches, snapcraft-preload, lua-kong-nginx-module]
    plugin: autotools
    # NOTE: when changing the version of openresty, also change the version
    # number in the openresty-kong-patches dir we use to patch openresty
    source: https://openresty.org/download/openresty-1.15.8.2.tar.gz
    install-via: prefix
    # configure options here from https://getkong.org/install/source/
    configflags:
      - --with-ipv6
      - --with-pcre-jit
      - --with-http_ssl_module
      - --with-http_realip_module
      - --with-http_stub_status_module
      - --with-http_v2_module
      - --add-module=$SNAPCRAFT_STAGE/lua-kong-nginx-module
    build-packages:
      - build-essential
      - libpcre3-dev
      - perl
      - curl
      - libssl-dev
      - zlib1g-dev
    stage-packages:
      - perl
    override-pull: |
      snapcraftctl pull
      cd $SNAPCRAFT_PART_SRC/bundle
      # apply patches from openresty-kong-patches
      for i in $SNAPCRAFT_STAGE/openresty-kong-patches/1.15.8.2/*.patch; do
        patch -p1 < $i
      done
    override-build: |
      snapcraftctl build
      # openresty will make an absolute symbolic link of openresty to the
      # nginx binary, so we need to delete that and replace it with a relative
      # symlink
      cd $SNAPCRAFT_PART_INSTALL/bin
      rm -rf openresty
      ln -s ../nginx/sbin/nginx openresty
      ln -s ../nginx/sbin/nginx nginx
      # the openresty build system also hard-codes the path to nginx inside
      # the "resty" binary so we need to change that
      if [ -z "$SNAPCRAFT_PROJECT_NAME" ]; then
        echo "SNAPCRAFT_PROJECT_NAME is undefined, snapcraft upstream change?"
        exit 1
      fi
      sed -i \
        -e s@$SNAPCRAFT_PART_INSTALL/nginx/sbin/nginx@/snap/$SNAPCRAFT_PROJECT_NAME/current/nginx/sbin/nginx@ \
        resty
  lua:
    # this dependency is somewhat artificial, because
    # when iterating on the openresty parts if you just rebuild openresty,
    # without also rebuilding lua, then kong will fail because it can't find
    # luarocks.cfg somewhere...
    # not sure why re-building openresty causes the luarocks config file to be messed
    # up, but if we order it like so then rebuilding any one of them will always work
    # openresty -> lua -> luarocks -> kong
    # this may have to do with installing lua and luarocks into $SNAPCRAFT_STAGE
    after: [openresty]
    source: https://www.lua.org/ftp/lua-5.1.5.tar.gz
    source-type: tar
    plugin: make
    make-parameters: [linux]
    build-packages:
      - libreadline-dev
      - libncurses5-dev
    override-build: |
      # patch the Makefile to use $SNAPCRAFT_STAGE for the INSTALL_TOP variable
      # which unfortunately is not settable using an environment variable and thus needs
      # this manual patch
      sed -i "s@INSTALL_TOP= /usr/local@INSTALL_TOP=$SNAPCRAFT_STAGE@" Makefile
      snapcraftctl build
  luarocks:
    after: [lua]
    plugin: autotools
    source: https://github.com/luarocks/luarocks.git
    source-branch: v3.2.1
    source-depth: 1
    override-build: |
      ./configure \
        --prefix=$SNAPCRAFT_STAGE \
        --with-lua=$SNAPCRAFT_STAGE \
        --with-lua-include=$SNAPCRAFT_STAGE/luajit/include/luajit-2.1 \
        --lua-version=5.1
      make build
      make install
  kong:
    # order this part after snapcraft-preload because there are include paths
    # that snapcraft will generate for this parts to auto-include in the
    # compile options for later parts if the part is C-based (i.e. some deps of
    # kong), but these include paths will break compiling snapcraft-preload in
    # very nasty ways
    # note that it seems only kong breaks snapcraft-preload, but do openresty
    # too just for good measure until we have a better resolution for this
    # see also https://github.com/sergiusens/snapcraft-preload/issues/38
    # ideally this would just be a "before: " on the snapcraft-preload part, but
    # snapcraft doesn't support that, see
    # https://bugs.launchpad.net/snapcraft/+bug/1848493
    after: [snapcraft-preload, luarocks]
    source: https://github.com/kong/kong.git
    plugin: nil
    source-tag: 2.0.4
    source-depth: 1
    build-packages:
      - unzip
      - libssl-dev
      - libpcre3-dev
      - libyaml-dev
      - luarocks
      - lua5.1
    stage-packages:
      - perl
      - luarocks
      - lua5.1
      - libyaml-dev
    override-pull : |
      snapcraftctl pull
      cd $SNAPCRAFT_PART_SRC
      patch  < "$SNAPCRAFT_PROJECT_DIR/snap/local/patches/0002-lua-resty-openssl-fix.patch"
    override-build: |
      # first copy the default config file provided and install it into $SNAPCRAFT_PART_INSTALL/config
      mkdir -p $SNAPCRAFT_PART_INSTALL/config
      cp kong.conf.default $SNAPCRAFT_PART_INSTALL/config/kong.conf

      # handle the location of openssl + libcrypto by architecture
      # cause luarocks is silly and hardcodes /usr/lib/x86_64-linux-gnu as the lib search path
      case "$(dpkg --print-architecture)" in
        amd64)
          # x64 is the only arch that luarocks can properly find libs for :-/
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL
          ;;
        arm64)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/aarch64-linux-gnu \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/aarch64-linux-gnu \
            OPENSSL_INCDIR=/usr/include
          ;;
        armhf)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/arm-linux-gnueabihf \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/arm-linux-gnueabihf \
            OPENSSL_INCDIR=/usr/include
          ;;
        i386)
          luarocks make --tree=$SNAPCRAFT_PART_INSTALL \
            CRYPTO_LIBDIR=/usr/lib/i386-linux-gnu \
            CRYPTO_INCDIR=/usr/include \
            OPENSSL_LIBDIR=/usr/lib/i386-linux-gnu \
            OPENSSL_INCDIR=/usr/include
          ;;
        *)
          echo "Unsupported arch $(dpkg --print-architecture)"
          exit 1
          ;;
      esac

      mkdir -p $SNAPCRAFT_PART_INSTALL/bin
      cp bin/kong $SNAPCRAFT_PART_INSTALL/bin/kong
      # make all the things inside the cmd directory executable because they for some reason aren't executable by default...
      cd $SNAPCRAFT_PART_INSTALL/share/lua/5.1/kong/cmd
      for cmd in $(ls *.lua); do
        chmod +x $cmd
      done

      # TODO: the json2lua script references $SNAPCRAFT_PART_INSTALL in some
      # paths it tries to load things from, probably worth fixing that to use
      # $SNAP, etc. but currently json2lua seems unused so not changing it now

  # snapcraft preload is necessary to make postgres just use a different
  # lockfile location in /dev/shm
  # NOTE: if this ever breaks in really scary ways when compiling with lots of
  # warnings, see the comment on the kong part, tldr probably some other C/C++
  # part in the build broke snapcraft-preload by running before
  # snapcraft-preload
  snapcraft-preload:
    source: https://github.com/sergiusens/snapcraft-preload.git
    plugin: cmake
    build-packages:
      - to arm64:
          - g++-multilib-arm-linux-gnueabihf
          - gcc-multilib-arm-linux-gnueabihf
      - else:
          - gcc-multilib
          - g++-multilib
    stage-packages:
      - to amd64:
          - lib32stdc++6
  gosu:
    source: https://github.com/tianon/gosu.git
    plugin: go
    go-importpath: github.com/tianon/gosu
    build-environment:
      - CGO_ENABLED: "0"
  postgres:
    plugin: nil
    override-build: |
      snapcraftctl build
      # the perl package for postgres hard-codes the bin dir as /usr/lib/postgresql
      # so we need to prepend that with /snap/postgres/current/ before it will
      # work
      sed -i -e \
        's@our $binroot = \"/usr/lib/postgresql/\"@our $binroot = \"/snap/'$SNAPCRAFT_PROJECT_NAME'/current/usr/lib/postgresql/\";@' \
        $SNAPCRAFT_PART_INSTALL/usr/share/perl5/PgCommon.pm
    stage-packages:
      - postgresql
      - postgresql-contrib
      - postgresql-client
      - perl
